import { fetchWithRetry, ErrorResponse, apiUrl } from "../../../util/fetch";

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.4
// source: image/v1/image.proto

/* eslint-disable */
import { type CreateImage, type Image } from "../../common/image/v1/image";
import {
  type PageNavigationRequest,
  type PageNavigationResponse,
} from "../../common/page_navigation/v1/page_navigation";

export const protobufPackage = "faceblur.image.v1";

export interface GetUploadURLRequest {
}

export interface GetUploadURLResponse {
  version: string;
  url: string;
}

export interface SubmitImageRequest {
  image: CreateImage | undefined;
}

export interface SubmitImageResponse {
  version: string;
}

export interface ListImagesRequest {
  pageNavigation: PageNavigationRequest | undefined;
}

export interface ListImagesResponse {
  version: string;
  images: Image[];
  pageNavigation: PageNavigationResponse | undefined;
}

export interface ImageService {
  /** GetUploadURL returns a new signed URL for image upload */
  GetUploadURL(request: GetUploadURLRequest): Promise<GetUploadURLResponse>;
  /** SubmitImage creates a new image and puts it to the processing queue */
  SubmitImage(request: SubmitImageRequest): Promise<SubmitImageResponse>;
  /** ListImages returns a list of user images, paginated and sorted by creation date */
  ListImages(request: ListImagesRequest): Promise<ListImagesResponse>;
}


// GetUploadURL returns a new signed URL for image upload
export async function GetUploadURL(request: GetUploadURLRequest): Promise<GetUploadURLResponse | ErrorResponse> {
  try {
    const response = await fetchWithRetry(`${apiUrl}/v1/image/upload-url/get`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(request),
    });

    if (!response.ok) {
      return {
        error: `Status: ${response.status}`,
      };
    }

    return await response.json();
  } catch (error) {
    return {
      error: (error as Error).message,
    };
  }
}

// SubmitImage creates a new image and puts it to the processing queue
export async function SubmitImage(request: SubmitImageRequest): Promise<SubmitImageResponse | ErrorResponse> {
  try {
    const response = await fetchWithRetry(`${apiUrl}/v1/image/submit`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(request),
    });

    if (!response.ok) {
      return {
        error: `Status: ${response.status}`,
      };
    }

    return await response.json();
  } catch (error) {
    return {
      error: (error as Error).message,
    };
  }
}

// ListImages returns a list of user images, paginated and sorted by creation date
export async function ListImages(request: ListImagesRequest): Promise<ListImagesResponse | ErrorResponse> {
  try {
    const response = await fetchWithRetry(`${apiUrl}/v1/image/list`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(request),
    });

    if (!response.ok) {
      return {
        error: `Status: ${response.status}`,
      };
    }

    return await response.json();
  } catch (error) {
    return {
      error: (error as Error).message,
    };
  }
}

