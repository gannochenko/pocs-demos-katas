import { customFetch, isErrorResponse } from "../../../util/fetch";

import { JsonDecoder } from "ts.data.json";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.4
// source: image/v1/image.proto
/* eslint-disable */
import { type CreateImage, type Image, CreateImageDecoder, ImageDecoder } from "../../common/image/v1/image";
import { type PageNavigationRequest, type PageNavigationResponse, PageNavigationRequestDecoder, PageNavigationResponseDecoder } from "../../common/page_navigation/v1/page_navigation";
export const protobufPackage = "faceblur.image.v1";
export interface GetUploadURLRequest {
}
export interface GetUploadURLResponse {
    version: string;
    url: string;
    objectName: string;
}
export interface SubmitImageRequest {
    image: CreateImage | undefined;
}
export interface SubmitImageResponse {
    version: string;
    image: Image | undefined;
}
export interface ListImagesRequest {
    pageNavigation: PageNavigationRequest | undefined;
}
export interface ListImagesResponse {
    version: string;
    images: Image[];
    pageNavigation: PageNavigationResponse | undefined;
}
export interface ImageService {
    /** GetUploadURL returns a new signed URL for image upload */
    GetUploadURL(request: GetUploadURLRequest): Promise<GetUploadURLResponse>;
    /** SubmitImage creates a new image and puts it to the processing queue */
    SubmitImage(request: SubmitImageRequest): Promise<SubmitImageResponse>;
    /** ListImages returns a list of user images, paginated and sorted by creation date */
    ListImages(request: ListImagesRequest): Promise<ListImagesResponse>;
}




export const GetUploadURLRequestDecoder = JsonDecoder.object(
    {
    },
    "GetUploadURLRequest"
);

export const GetUploadURLResponseDecoder = JsonDecoder.object(
    {
		version: JsonDecoder.optional(JsonDecoder.string),
		url: JsonDecoder.optional(JsonDecoder.string),
		objectName: JsonDecoder.optional(JsonDecoder.string),
    },
    "GetUploadURLResponse"
);

export const SubmitImageRequestDecoder = JsonDecoder.object(
    {
		image: JsonDecoder.optional(CreateImageDecoder),
    },
    "SubmitImageRequest"
);

export const SubmitImageResponseDecoder = JsonDecoder.object(
    {
		version: JsonDecoder.optional(JsonDecoder.string),
		image: JsonDecoder.optional(ImageDecoder),
    },
    "SubmitImageResponse"
);

export const ListImagesRequestDecoder = JsonDecoder.object(
    {
		pageNavigation: JsonDecoder.optional(PageNavigationRequestDecoder),
    },
    "ListImagesRequest"
);

export const ListImagesResponseDecoder = JsonDecoder.object(
    {
		version: JsonDecoder.optional(JsonDecoder.string),
		images: JsonDecoder.optional(JsonDecoder.array(ImageDecoder, "arrayOfImages")),
		pageNavigation: JsonDecoder.optional(PageNavigationResponseDecoder),
    },
    "ListImagesResponse"
);


type DeepNonUndefined<T> = T extends object
? {
  [K in keyof T]: DeepNonUndefined<Exclude<T[K], undefined>>;
}
: T;

type DeepReplaceDateWithNullable<T> = T extends Date
  ? Date | null
  : T extends object
  ? {
      [K in keyof T]: DeepReplaceDateWithNullable<T[K]>;
    }
  : T;




/*
GetUploadURL returns a new signed URL for image upload
*/
export async function GetUploadURL(request: GetUploadURLRequest, token?: string) {
  const data = await customFetch<GetUploadURLRequest, GetUploadURLResponse>("/v1/image/upload-url/get", request, token);
  if (isErrorResponse(data)) {
    return data;
  }

  await GetUploadURLResponseDecoder.decodeToPromise(data);
  
  return data;
}

/*
SubmitImage creates a new image and puts it to the processing queue
*/
export async function SubmitImage(request: SubmitImageRequest, token?: string) {
  const data = await customFetch<SubmitImageRequest, SubmitImageResponse>("/v1/image/submit", request, token);
  if (isErrorResponse(data)) {
    return data;
  }

  await SubmitImageResponseDecoder.decodeToPromise(data);
  
  return data;
}

/*
ListImages returns a list of user images, paginated and sorted by creation date
*/
export async function ListImages(request: ListImagesRequest, token?: string) {
  const data = await customFetch<ListImagesRequest, ListImagesResponse>("/v1/image/list", request, token);
  if (isErrorResponse(data)) {
    return data;
  }

  await ListImagesResponseDecoder.decodeToPromise(data);
  
  return data;
}


