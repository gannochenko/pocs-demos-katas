import { customFetch } from "../../../util/fetch";

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.4
// source: image/v1/image.proto

/* eslint-disable */
import { type CreateImage, type Image } from "../../common/image/v1/image";
import {
  type PageNavigationRequest,
  type PageNavigationResponse,
} from "../../common/page_navigation/v1/page_navigation";

export const protobufPackage = "faceblur.image.v1";

export interface GetUploadURLRequest {
}

export interface GetUploadURLResponse {
  version: string;
  url: string;
  objectName: string;
}

export interface SubmitImageRequest {
  image: CreateImage | undefined;
}

export interface SubmitImageResponse {
  version: string;
  image: Image | undefined;
}

export interface ListImagesRequest {
  pageNavigation: PageNavigationRequest | undefined;
}

export interface ListImagesResponse {
  version: string;
  images: Image[];
  pageNavigation: PageNavigationResponse | undefined;
}

export interface ImageService {
  /** GetUploadURL returns a new signed URL for image upload */
  GetUploadURL(request: GetUploadURLRequest): Promise<GetUploadURLResponse>;
  /** SubmitImage creates a new image and puts it to the processing queue */
  SubmitImage(request: SubmitImageRequest): Promise<SubmitImageResponse>;
  /** ListImages returns a list of user images, paginated and sorted by creation date */
  ListImages(request: ListImagesRequest): Promise<ListImagesResponse>;
}



/*
GetUploadURL returns a new signed URL for image upload
*/
export async function GetUploadURL(request: GetUploadURLRequest, token?: string) {
  return customFetch<GetUploadURLRequest, GetUploadURLResponse>("/v1/image/upload-url/get", request, token);
}

/*
SubmitImage creates a new image and puts it to the processing queue
*/
export async function SubmitImage(request: SubmitImageRequest, token?: string) {
  return customFetch<SubmitImageRequest, SubmitImageResponse>("/v1/image/submit", request, token);
}

/*
ListImages returns a list of user images, paginated and sorted by creation date
*/
export async function ListImages(request: ListImagesRequest, token?: string) {
  return customFetch<ListImagesRequest, ListImagesResponse>("/v1/image/list", request, token);
}


