

import { JsonDecoder } from "ts.data.json";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: google/protobuf/wrappers.proto
/* eslint-disable */
export const protobufPackage = "google.protobuf";
/**
 * Wrapper message for `double`.
 *
 * The JSON representation for `DoubleValue` is JSON number.
 */
export interface DoubleValue {
    /** The double value. */
    value: number;
}
/**
 * Wrapper message for `float`.
 *
 * The JSON representation for `FloatValue` is JSON number.
 */
export interface FloatValue {
    /** The float value. */
    value: number;
}
/**
 * Wrapper message for `int64`.
 *
 * The JSON representation for `Int64Value` is JSON string.
 */
export interface Int64Value {
    /** The int64 value. */
    value: string;
}
/**
 * Wrapper message for `uint64`.
 *
 * The JSON representation for `UInt64Value` is JSON string.
 */
export interface UInt64Value {
    /** The uint64 value. */
    value: string;
}
/**
 * Wrapper message for `int32`.
 *
 * The JSON representation for `Int32Value` is JSON number.
 */
export interface Int32Value {
    /** The int32 value. */
    value: number;
}
/**
 * Wrapper message for `uint32`.
 *
 * The JSON representation for `UInt32Value` is JSON number.
 */
export interface UInt32Value {
    /** The uint32 value. */
    value: number;
}
/**
 * Wrapper message for `bool`.
 *
 * The JSON representation for `BoolValue` is JSON `true` and `false`.
 */
export interface BoolValue {
    /** The bool value. */
    value: boolean;
}
/**
 * Wrapper message for `string`.
 *
 * The JSON representation for `StringValue` is JSON string.
 */
export interface StringValue {
    /** The string value. */
    value: string;
}
/**
 * Wrapper message for `bytes`.
 *
 * The JSON representation for `BytesValue` is JSON string.
 */
export interface BytesValue {
    /** The bytes value. */
    value: Uint8Array;
}




export const DoubleValueDecoder = JsonDecoder.object(
    {
		value: JsonDecoder.number,
    },
    "DoubleValue"
);

export const FloatValueDecoder = JsonDecoder.object(
    {
		value: JsonDecoder.number,
    },
    "FloatValue"
);

export const Int64ValueDecoder = JsonDecoder.object(
    {
		value: JsonDecoder.string,
    },
    "Int64Value"
);

export const UInt64ValueDecoder = JsonDecoder.object(
    {
		value: JsonDecoder.string,
    },
    "UInt64Value"
);

export const Int32ValueDecoder = JsonDecoder.object(
    {
		value: JsonDecoder.number,
    },
    "Int32Value"
);

export const UInt32ValueDecoder = JsonDecoder.object(
    {
		value: JsonDecoder.number,
    },
    "UInt32Value"
);

export const BoolValueDecoder = JsonDecoder.object(
    {
		value: JsonDecoder.boolean,
    },
    "BoolValue"
);

export const StringValueDecoder = JsonDecoder.object(
    {
		value: JsonDecoder.string,
    },
    "StringValue"
);

export const BytesValueDecoder = JsonDecoder.object(
    {
		value: JsonDecoder.string,
    },
    "BytesValue"
);




