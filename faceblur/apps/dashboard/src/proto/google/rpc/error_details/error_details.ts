

import { JsonDecoder } from "ts.data.json";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: google/rpc/error_details/error_details.proto
/* eslint-disable */
import { type Duration, DurationDecoder } from "../../protobuf/duration";
export const protobufPackage = "google.rpc";
/**
 * Describes when the clients can retry a failed request. Clients could ignore
 * the recommendation here or retry when this information is missing from error
 * responses.
 *
 * It's always recommended that clients should use exponential backoff when
 * retrying.
 *
 * Clients should wait until `retry_delay` amount of time has passed since
 * receiving the error response before retrying.  If retrying requests also
 * fail, clients should use an exponential backoff scheme to gradually increase
 * the delay between retries based on `retry_delay`, until either a maximum
 * number of retires have been reached or a maximum retry delay cap has been
 * reached.
 */
export interface RetryInfo {
    /** Clients should wait at least this long between retrying the same request. */
    retryDelay: Duration | undefined;
}
/** Describes additional debugging info. */
export interface DebugInfo {
    /** The stack trace entries indicating where the error occurred. */
    stackEntries: string[];
    /** Additional debugging information provided by the server. */
    detail: string;
}
/**
 * Describes how a quota check failed.
 *
 * For example if a daily limit was exceeded for the calling project,
 * a service could respond with a QuotaFailure detail containing the project
 * id and the description of the quota limit that was exceeded.  If the
 * calling project hasn't enabled the service in the developer console, then
 * a service could respond with the project id and set `service_disabled`
 * to true.
 *
 * Also see RetryDetail and Help types for other details about handling a
 * quota failure.
 */
export interface QuotaFailure {
    /** Describes all quota violations. */
    violations: QuotaFailure_Violation[];
}
/**
 * A message type used to describe a single quota violation.  For example, a
 * daily quota or a custom quota that was exceeded.
 */
export interface QuotaFailure_Violation {
    /**
     * The subject on which the quota check failed.
     * For example, "clientip:<ip address of client>" or "project:<Google
     * developer project id>".
     */
    subject: string;
    /**
     * A description of how the quota check failed. Clients can use this
     * description to find more about the quota configuration in the service's
     * public documentation, or find the relevant quota limit to adjust through
     * developer console.
     *
     * For example: "Service disabled" or "Daily Limit for read operations
     * exceeded".
     */
    description: string;
}
/**
 * Describes what preconditions have failed.
 *
 * For example, if an RPC failed because it required the Terms of Service to be
 * acknowledged, it could list the terms of service violation in the
 * PreconditionFailure message.
 */
export interface PreconditionFailure {
    /** Describes all precondition violations. */
    violations: PreconditionFailure_Violation[];
}
/** A message type used to describe a single precondition failure. */
export interface PreconditionFailure_Violation {
    /**
     * The type of PreconditionFailure. We recommend using a service-specific
     * enum type to define the supported precondition violation types. For
     * example, "TOS" for "Terms of Service violation".
     */
    type: string;
    /**
     * The subject, relative to the type, that failed.
     * For example, "google.com/cloud" relative to the "TOS" type would
     * indicate which terms of service is being referenced.
     */
    subject: string;
    /**
     * A description of how the precondition failed. Developers can use this
     * description to understand how to fix the failure.
     *
     * For example: "Terms of service not accepted".
     */
    description: string;
}
/**
 * Describes violations in a client request. This error type focuses on the
 * syntactic aspects of the request.
 */
export interface BadRequest {
    /** Describes all violations in a client request. */
    fieldViolations: BadRequest_FieldViolation[];
}
/** A message type used to describe a single bad request field. */
export interface BadRequest_FieldViolation {
    /**
     * A path leading to a field in the request body. The value will be a
     * sequence of dot-separated identifiers that identify a protocol buffer
     * field. E.g., "field_violations.field" would identify this field.
     */
    field: string;
    /** A description of why the request element is bad. */
    description: string;
}
/**
 * Contains metadata about the request that clients can attach when filing a bug
 * or providing other forms of feedback.
 */
export interface RequestInfo {
    /**
     * An opaque string that should only be interpreted by the service generating
     * it. For example, it can be used to identify requests in the service's logs.
     */
    requestId: string;
    /**
     * Any data that was used to serve this request. For example, an encrypted
     * stack trace that can be sent back to the service provider for debugging.
     */
    servingData: string;
}
/** Describes the resource that is being accessed. */
export interface ResourceInfo {
    /**
     * A name for the type of resource being accessed, e.g. "sql table",
     * "cloud storage bucket", "file", "Google calendar"; or the type URL
     * of the resource: e.g. "type.googleapis.com/google.pubsub.v1.Topic".
     */
    resourceType: string;
    /**
     * The name of the resource being accessed.  For example, a shared calendar
     * name: "example.com_4fghdhgsrgh@group.calendar.google.com", if the current
     * error is [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED].
     */
    resourceName: string;
    /**
     * The owner of the resource (optional).
     * For example, "user:<owner email>" or "project:<Google developer project
     * id>".
     */
    owner: string;
    /**
     * Describes what error is encountered when accessing this resource.
     * For example, updating a cloud project may require the `writer` permission
     * on the developer console project.
     */
    description: string;
}
/**
 * Provides links to documentation or for performing an out of band action.
 *
 * For example, if a quota check failed with an error indicating the calling
 * project hasn't enabled the accessed service, this can contain a URL pointing
 * directly to the right place in the developer console to flip the bit.
 */
export interface Help {
    /** URL(s) pointing to additional information on handling the current error. */
    links: Help_Link[];
}
/** Describes a URL link. */
export interface Help_Link {
    /** Describes what the link offers. */
    description: string;
    /** The URL of the link. */
    url: string;
}
/**
 * Provides a localized error message that is safe to return to the user
 * which can be attached to an RPC error.
 */
export interface LocalizedMessage {
    /**
     * The locale used following the specification defined at
     * http://www.rfc-editor.org/rfc/bcp/bcp47.txt.
     * Examples are: "en-US", "fr-CH", "es-MX"
     */
    locale: string;
    /** The localized error message in the above locale. */
    message: string;
}




export const RetryInfoDecoder = JsonDecoder.object(
    {
		retryDelay: DurationDecoder,
    },
    "RetryInfo"
);

export const DebugInfoDecoder = JsonDecoder.object(
    {
		stackEntries: JsonDecoder.array(JsonDecoder.string, "arrayOfStackEntries"),
		detail: JsonDecoder.string,
    },
    "DebugInfo"
);

export const QuotaFailureDecoder_ViolationDecoder = JsonDecoder.object(
    {
		subject: JsonDecoder.string,
		description: JsonDecoder.string,
    },
    "Violation"
);

export const PreconditionFailureDecoder_ViolationDecoder = JsonDecoder.object(
    {
		type: JsonDecoder.string,
		subject: JsonDecoder.string,
		description: JsonDecoder.string,
    },
    "Violation"
);

export const BadRequestDecoder_FieldViolationDecoder = JsonDecoder.object(
    {
		field: JsonDecoder.string,
		description: JsonDecoder.string,
    },
    "FieldViolation"
);

export const RequestInfoDecoder = JsonDecoder.object(
    {
		requestId: JsonDecoder.string,
		servingData: JsonDecoder.string,
    },
    "RequestInfo"
);

export const ResourceInfoDecoder = JsonDecoder.object(
    {
		resourceType: JsonDecoder.string,
		resourceName: JsonDecoder.string,
		owner: JsonDecoder.string,
		description: JsonDecoder.string,
    },
    "ResourceInfo"
);

export const HelpDecoder_LinkDecoder = JsonDecoder.object(
    {
		description: JsonDecoder.string,
		url: JsonDecoder.string,
    },
    "Link"
);

export const LocalizedMessageDecoder = JsonDecoder.object(
    {
		locale: JsonDecoder.string,
		message: JsonDecoder.string,
    },
    "LocalizedMessage"
);

export const QuotaFailureDecoder = JsonDecoder.object(
    {
		violations: JsonDecoder.array(QuotaFailureDecoder_ViolationDecoder, "arrayOfViolations"),
    },
    "QuotaFailure"
);

export const PreconditionFailureDecoder = JsonDecoder.object(
    {
		violations: JsonDecoder.array(PreconditionFailureDecoder_ViolationDecoder, "arrayOfViolations"),
    },
    "PreconditionFailure"
);

export const BadRequestDecoder = JsonDecoder.object(
    {
		fieldViolations: JsonDecoder.array(BadRequestDecoder_FieldViolationDecoder, "arrayOfFieldViolations"),
    },
    "BadRequest"
);

export const HelpDecoder = JsonDecoder.object(
    {
		links: JsonDecoder.array(HelpDecoder_LinkDecoder, "arrayOfLinks"),
    },
    "Help"
);




