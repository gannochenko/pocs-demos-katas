// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger Petstore - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * API version: 1.0.20-SNAPSHOT
 * Contact: apiteam@swagger.io
 */

package interfaces

import (
	"api/internal/api"
	"api/internal/domain"
	"api/internal/types"

	"context"
)

// PetService defines the api actions for the PetAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PetService interface {
	ListPets(ctx context.Context, request *domain.ListPetsRequest) (*domain.ListPetsResponse, error)
	AddPet(ctx context.Context, pet *domain.Pet) (*domain.AddPetResponse, error)
	UpdatePet(ctx context.Context, pet *domain.Pet) (*domain.UpdatePetResponse, error)
	DeletePet(context.Context, string) (*domain.DeletePetResponse, error)
	//GetPetById(context.Context, int64) (*domain.GetPetByIdResponse, error)
}

// StoreService defines the api actions for the StoreAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type StoreService interface {
	DeleteOrder(context.Context, int64) (*domain.DeleteOrderResponse, error)
	GetInventory(context.Context) (*domain.GetInventoryResponse, error)
	GetOrderById(context.Context, int64) (*domain.GetOrderByIdResponse, error)
	PlaceOrder(context.Context, api.Order) (*domain.PlaceOrderResponse, error)
}

type ConfigService interface {
	GetConfig() (*domain.Config, error)
}

type AuthService interface {
	WithAuth(next types.Handler) types.Handler
}