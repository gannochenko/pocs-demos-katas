// Package webhooks provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package webhooks

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AcceptAcmeCorporationWebhookRequestEventType.
const (
	OrderCancelled AcceptAcmeCorporationWebhookRequestEventType = "order.cancelled"
	OrderCompleted AcceptAcmeCorporationWebhookRequestEventType = "order.completed"
	OrderCreated   AcceptAcmeCorporationWebhookRequestEventType = "order.created"
	UserCreated    AcceptAcmeCorporationWebhookRequestEventType = "user.created"
	UserDeleted    AcceptAcmeCorporationWebhookRequestEventType = "user.deleted"
	UserUpdated    AcceptAcmeCorporationWebhookRequestEventType = "user.updated"
)

// AcceptAcmeCorporationWebhookError defines model for AcceptAcmeCorporationWebhookError.
type AcceptAcmeCorporationWebhookError struct {
	// Message Message
	Message string `json:"message"`
}

// AcceptAcmeCorporationWebhookRequest defines model for AcceptAcmeCorporationWebhookRequest.
type AcceptAcmeCorporationWebhookRequest struct {
	// EventId Unique identifier for the webhook event
	EventId openapi_types.UUID `json:"event_id"`

	// EventTimestamp ISO 8601 timestamp when the event occurred
	EventTimestamp time.Time `json:"event_timestamp"`

	// EventType Type of the webhook event
	EventType AcceptAcmeCorporationWebhookRequestEventType `json:"event_type"`

	// Payload Event-specific payload data
	Payload map[string]interface{} `json:"payload"`
}

// AcceptAcmeCorporationWebhookRequestEventType Type of the webhook event
type AcceptAcmeCorporationWebhookRequestEventType string

// AcceptAcmeCorporationWebhookResponse defines model for AcceptAcmeCorporationWebhookResponse.
type AcceptAcmeCorporationWebhookResponse struct {
	// Message Message
	Message string `json:"message"`
}

// AcceptAcmeCorporationWebhookJSONRequestBody defines body for AcceptAcmeCorporationWebhook for application/json ContentType.
type AcceptAcmeCorporationWebhookJSONRequestBody = AcceptAcmeCorporationWebhookRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Accept Acme Corporation webhook
	// (POST /v1/acme-corporation/webhooks)
	AcceptAcmeCorporationWebhook(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AcceptAcmeCorporationWebhook converts echo context to params.
func (w *ServerInterfaceWrapper) AcceptAcmeCorporationWebhook(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AcceptAcmeCorporationWebhook(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/acme-corporation/webhooks", wrapper.AcceptAcmeCorporationWebhook)

}

type AcceptAcmeCorporationWebhookRequestObject struct {
	Body *AcceptAcmeCorporationWebhookJSONRequestBody
}

type AcceptAcmeCorporationWebhookResponseObject interface {
	VisitAcceptAcmeCorporationWebhookResponse(w http.ResponseWriter) error
}

type AcceptAcmeCorporationWebhook200JSONResponse AcceptAcmeCorporationWebhookResponse

func (response AcceptAcmeCorporationWebhook200JSONResponse) VisitAcceptAcmeCorporationWebhookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AcceptAcmeCorporationWebhook400JSONResponse AcceptAcmeCorporationWebhookError

func (response AcceptAcmeCorporationWebhook400JSONResponse) VisitAcceptAcmeCorporationWebhookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AcceptAcmeCorporationWebhook500JSONResponse AcceptAcmeCorporationWebhookError

func (response AcceptAcmeCorporationWebhook500JSONResponse) VisitAcceptAcmeCorporationWebhookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Accept Acme Corporation webhook
	// (POST /v1/acme-corporation/webhooks)
	AcceptAcmeCorporationWebhook(ctx context.Context, request AcceptAcmeCorporationWebhookRequestObject) (AcceptAcmeCorporationWebhookResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AcceptAcmeCorporationWebhook operation middleware
func (sh *strictHandler) AcceptAcmeCorporationWebhook(ctx echo.Context) error {
	var request AcceptAcmeCorporationWebhookRequestObject

	var body AcceptAcmeCorporationWebhookJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AcceptAcmeCorporationWebhook(ctx.Request().Context(), request.(AcceptAcmeCorporationWebhookRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AcceptAcmeCorporationWebhook")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AcceptAcmeCorporationWebhookResponseObject); ok {
		return validResponse.VisitAcceptAcmeCorporationWebhookResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
